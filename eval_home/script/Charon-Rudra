#!/bin/bash
set -e

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <harness_dir>"
    echo "Error: Exactly one argument is required."
    exit 1
fi

HARNESS_DIR=$(realpath "$1")

# Check if $HARNESS_DIR is a directory
if [ ! -d "$HARNESS_DIR" ]; then
    echo "Error: '$HARNESS_DIR' is not a directory or does not exist."
    exit 1
fi

# Check if $HARNESS_DIR contains Cargo.toml
if [ ! -f "$HARNESS_DIR/Cargo.toml" ]; then
    echo "Error: Directory '$HARNESS_DIR' does not contain a Cargo.toml file."
    exit 1
fi

# CARGO_CMD='cargo +nightly-2021-10-21'
# export RUDRA_RUST_CHANNEL=nightly-2021-10-21
# export RUDRA_RUNNER_HOME="$HOME/code/eval_home/tools/rudra-home"
# export RUSTFLAGS="-Awarnings -L $HOME/.rustup/toolchains/${RUDRA_RUST_CHANNEL}-x86_64-unknown-linux-gnu/lib"
# export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$HOME/.rustup/toolchains/${RUDRA_RUST_CHANNEL}-x86_64-unknown-linux-gnu/lib"

cd "$HARNESS_DIR"
LAST_DIR=$(basename "$HARNESS_DIR")
# echo "${LAST_DIR//-/_}.ullbc"
RUSTFLAGS="-Awarnings" /home/varixer/code/eval_home/tools/charon/bin/charon --ullbc --cargo-arg=-q

output=$(cargo-charon-rudra --file "${LAST_DIR//-/_}.ullbc" 2>&1)
exit_code=$?

# 根据退出码处理输出
if [ $exit_code -eq 0 ]; then
    # 命令成功，使用 解析器 转换统一格式输出
    echo "$output" | python -c '
import sys
import re

def parse_stdout_output(output: str) -> str:
    reports = []
    lines = output.splitlines()
    i = 0

    while i < len(lines):
        # 查找 Info, Warning, Error 开头的行
        if lines[i].startswith(("Info", "Warning", "Error")):
            # 提取 level, analyzer 和 description
            first_line = lines[i]
            level, analyzer, description = parse_level_analyzer_description(first_line)

            i += 1
            # 提取 location
            location = ""
            if i < len(lines) and lines[i].startswith("->"):
                location = lines[i][3:]  # 去掉 "-> "
                i += 1

            # 提取 source, 保持原样
            source = []
            while i < len(lines) and not lines[i].startswith(("Info", "Warning", "Error")):
                source.append(lines[i])
                i += 1

            # 保存提取的报告
            reports.append(f"[Charon-Rudra] {level}: {description}\n--> {location}\n{"\n".join(source)}")

        else:
            i += 1

    # 返回所有报告用空行分隔的字符串
    return "\n".join(reports)


def parse_level_analyzer_description(line: str):
    """解析 level, analyzer 和 description"""
    match = re.match(r"(Info|Warning|Error)\s+\((.*?)\):\s+(.*)", line)
    if match:
        level = match.group(1)
        analyzer = match.group(2)
        description = match.group(3)
        return level, analyzer, description
    else:
        # 没有 analyzer 的情况下
        match = re.match(r"(Info|Warning|Error)\s+(.*)", line)
        if match:
            level = match.group(1)
            description = match.group(2)
            return level, "", description
    return "", "", ""


# 从 stdin 读取输入
input_data = sys.stdin.read()

# 解析并转换格式
result = parse_stdout_output(input_data)

# 输出到 stdout
sys.stdout.write(result)
'
else
    # 命令失败，原样输出错误信息
    echo "$output"
fi

# 返回原始退出码
exit $exit_code